{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/search-form/search-form.component.css","webpack:///./src/app/search-form/search-form.component.html","webpack:///./src/app/search-form/search-form.component.ts","webpack:///./src/app/search.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".header-container {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center; /* Center the content horizontally */\\n    text-align: center;\\n    padding: 10px; /* Optional padding */\\n    background-color: #343a40; /* Optional background color for the header */\\n  }\\n  \\n  .header-container .logo {\\n    margin-right: 10px; /* Space between the logo and the header */\\n    height: 50px\\n  }\\n  \\n  .header-container h1 {\\n    color: #ffffff; /* Ensure the header text is white */\\n    margin: 0; /* Remove default margin */\\n  }\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div class=\\\"header-container\\\">\\n  <img src=\\\"https://yadacoin.io/yadacoinstatic/yadalogo200.png\\\" class=\\\"logo\\\"/>\\n  <h1>YadaCoin Explorer</h1>\\n</div>\\n<app-search-form></app-search-form>\\n\\n\"","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"explorer\";\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\nimport { SearchFormComponent } from './search-form/search-form.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SearchFormComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"body {\\n    background-color: #343a40;\\n    color: #ffffff;\\n}\\n\\n.grid-container {\\n    display: flex;\\n    flex-wrap: wrap;\\n    justify-content: space-between;\\n}\\n\\n.grid-item {\\n    flex: 0 0 48%; /* Each item takes up about half the width of the container */\\n    margin-bottom: 20px; /* Space between rows */\\n    padding: 10px; /* Optional padding for better spacing inside items */\\n    box-sizing: border-box;\\n    background-color: #495057; /* Dark background for items */\\n    border: 1px solid #6c757d; /* Border with a lighter shade */\\n    border-radius: 5px; /* Optional rounded corners */\\n    color: #ffffff; /* Light text color */\\n}\\n\\n.grid-item h2, .grid-item h3 {\\n    color: #ffffff; /* Ensure headers are also light color */\\n}\\n\\n@media (max-width: 768px) {\\n    .grid-item {\\n        flex: 0 0 100%; /* On smaller screens, items take full width */\\n    }\\n}\\n\\n.block-info {\\n    border: 1px solid #6c757d;\\n    border-radius: 5px;\\n    padding: 15px;\\n    margin-bottom: 20px;\\n    background-color: #495057;\\n}\\n\\n.block-info h3, .block-info h4 {\\n    color: #ffffff;\\n}\\n\\n.transactions {\\n    margin-top: 10px;\\n}\\n\\n.transaction {\\n    padding: 10px;\\n    border: 1px solid #6c757d;\\n    border-radius: 5px;\\n    margin-bottom: 10px;\\n    background-color: #343a40;\\n}\\n\\n.transaction h4 {\\n    color: #adb5bd;\\n}\\n\\n.transaction p {\\n    margin: 0;\\n    color: #ffffff;\\n}\\n\\n.transaction a {\\n    color: #17a2b8;\\n}\\n\\n.transaction-container {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: flex-start;\\n}\\n\\n.transaction-inputs, .transaction-outputs {\\n    width: 48%;\\n    padding: 10px;\\n    background-color: #495057;\\n    border: 1px solid #6c757d;\\n    border-radius: 5px;\\n    overflow: auto;\\n}\\n\\n.transaction-inputs ul, .transaction-outputs ul {\\n    list-style: none;\\n    padding: 0;\\n    margin: 0;\\n}\\n\\n.transaction-inputs li, .transaction-outputs li {\\n    margin-bottom: 10px;\\n}\"","module.exports = \"<div class=\\\"grid-container\\\">\\n  <div class=\\\"grid-item\\\">\\n    <h2>Current block height: {{ current_height }}</h2>\\n  </div>\\n  <div class=\\\"grid-item\\\">\\n    <h2>Coins in circulation: {{ circulating }}</h2>\\n  </div>\\n  <div class=\\\"grid-item\\\">\\n    <h3>Maximum supply: 21,000,000</h3>\\n  </div>\\n  <div class=\\\"grid-item\\\">\\n    <h3>Network hash rate: {{ hashrate }}h/s</h3>\\n  </div>\\n  <div class=\\\"grid-item\\\">\\n    <h3>Difficulty: {{ difficulty }}</h3>\\n  </div>\\n  <div class=\\\"grid-item\\\">\\n    <h3>Hashing algo: RandomX (rx/yada)</h3>\\n  </div>\\n</div>\\n<form (ngSubmit)=\\\"onSubmit()\\\" #searchForm=\\\"ngForm\\\">\\n  <label for=\\\"expertMode\\\">Expert Mode:&nbsp;</label>\\n  <input type=\\\"checkbox\\\" name=\\\"expertMode\\\" [(ngModel)]=\\\"expertMode\\\" />\\n  <input\\n    class=\\\"form-control\\\"\\n    [(ngModel)]=\\\"model.term\\\"\\n    name=\\\"term\\\"\\n    placeholder=\\\"Wallet address, Txn Id, Block height...\\\"\\n  />\\n  <button style=\\\"margin-top: 15px; margin-bottom: 15px\\\" class=\\\"btn btn-success\\\">\\n    Search\\n  </button>\\n</form>\\n<div *ngIf=\\\"searching\\\"><strong>Searching...</strong></div>\\n<div *ngIf=\\\"!searching && submitted && result.length === 0\\\">\\n  <strong>No results</strong>\\n</div>\\n<h2 *ngIf=\\\"resultType === 'txn_outputs_to'\\\" style=\\\"margin-top: 25px\\\">\\n  Balance: {{ balance }}\\n</h2>\\n<ul *ngIf=\\\"resultType.substr(0, 6) === 'failed'\\\">\\n  <li *ngFor=\\\"let transaction of result\\\">\\n    <h3>Failed transactions</h3>\\n    <p><strong>exception class: </strong>{{ transaction.reason }}</p>\\n    <p>\\n      <strong>traceback: </strong\\n      ><textarea class=\\\"form-control\\\" rows=\\\"10\\\">{{\\n        transaction.error\\n      }}</textarea>\\n    </p>\\n    <p>\\n      <strong>public_key: </strong\\n      ><a href=\\\"/explorer?term={{ transaction.public_key }}\\\">{{\\n        transaction.public_key\\n      }}</a>\\n    </p>\\n    <p>\\n      <strong>signature: </strong\\n      ><a href=\\\"/explorer?term={{ transaction.id }}\\\">{{ transaction.id }}</a>\\n    </p>\\n    <p><strong>hash: </strong>{{ transaction.hash }}</p>\\n    <p><strong>fee: </strong>{{ transaction.fee }}</p>\\n    <p>\\n      <strong>diffie-hellman public key: </strong\\n      >{{ transaction.dh_public_key }}\\n    </p>\\n    <p>\\n      <strong>relationship identifier: </strong\\n      ><a href=\\\"/explorer?term={{ transaction.rid }}\\\">{{ transaction.rid }}</a>\\n    </p>\\n    <p>\\n      <strong>relationship data: </strong\\n      ><textarea class=\\\"form-control\\\">{{ transaction.relationship }}</textarea>\\n    </p>\\n    <div *ngIf=\\\"transaction.inputs.length === 0\\\">\\n      <strong>No inputs</strong>\\n    </div>\\n    <div *ngIf=\\\"transaction.inputs.length > 0\\\">\\n      <h3>Inputs</h3>\\n      <ul>\\n        <li *ngFor=\\\"let input of transaction.inputs\\\">\\n          <strong>Signature: </strong\\n          ><a href=\\\"/explorer?term={{ input.id }}\\\">{{ input.id }}</a>\\n        </li>\\n      </ul>\\n    </div>\\n    <div *ngIf=\\\"transaction.outputs.length === 0\\\">\\n      <strong>No outputs</strong>\\n    </div>\\n    <div *ngIf=\\\"transaction.outputs.length > 0\\\">\\n      <h3>Outputs</h3>\\n      <ul *ngFor=\\\"let output of transaction.outputs\\\">\\n        <li>\\n          <strong>Address: </strong\\n          ><a href=\\\"/explorer?term={{ output.to }}\\\">{{ output.to }}</a>\\n        </li>\\n        <li><strong>Amount: </strong>{{ output.value }}</li>\\n        <hr />\\n      </ul>\\n    </div>\\n  </li>\\n</ul>\\n<ul *ngIf=\\\"resultType.substr(0, 7) === 'mempool' && expertMode\\\">\\n  <h3>Mempool</h3>\\n  <li *ngFor=\\\"let transaction of result\\\">\\n    <p>\\n      <strong>public_key: </strong\\n      ><a href=\\\"/explorer?term={{ transaction.public_key }}\\\">{{\\n        transaction.public_key\\n      }}</a>\\n    </p>\\n    <p>\\n      <strong>signature: </strong\\n      ><a href=\\\"/explorer?term={{ transaction.id }}\\\">{{ transaction.id }}</a>\\n    </p>\\n    <p><strong>hash: </strong>{{ transaction.hash }}</p>\\n    <p><strong>fee: </strong>{{ transaction.fee }}</p>\\n    <p>\\n      <strong>diffie-hellman public key: </strong\\n      >{{ transaction.dh_public_key }}\\n    </p>\\n    <p>\\n      <strong>relationship identifier: </strong\\n      ><a href=\\\"/explorer?term={{ transaction.rid }}\\\">{{ transaction.rid }}</a>\\n    </p>\\n    <p>\\n      <strong>relationship data: </strong\\n      ><textarea class=\\\"form-control\\\">{{ transaction.relationship }}</textarea>\\n    </p>\\n    <div *ngIf=\\\"transaction.inputs.length === 0\\\">\\n      <strong>No inputs</strong>\\n    </div>\\n    <div *ngIf=\\\"transaction.inputs.length > 0\\\">\\n      <h3>Inputs</h3>\\n      <ul>\\n        <li *ngFor=\\\"let input of transaction.inputs\\\">\\n          <strong>Signature: </strong\\n          ><a href=\\\"/explorer?term={{ input.id }}\\\">{{ input.id }}</a>\\n        </li>\\n      </ul>\\n    </div>\\n    <div *ngIf=\\\"transaction.outputs.length === 0\\\">\\n      <strong>No outputs</strong>\\n    </div>\\n    <div *ngIf=\\\"transaction.outputs.length > 0\\\">\\n      <h3>Outputs</h3>\\n      <ul *ngFor=\\\"let output of transaction.outputs\\\">\\n        <li>\\n          <strong>Address: </strong\\n          ><a href=\\\"/explorer?term={{ output.to }}\\\">{{ output.to }}</a>\\n        </li>\\n        <li><strong>Amount: </strong>{{ output.value }}</li>\\n        <hr />\\n      </ul>\\n    </div>\\n  </li>\\n</ul>\\n\\n<ul *ngIf=\\\"resultType.substr(0, 7) === 'mempool' && !expertMode\\\">\\n  <h3>Mempool</h3>\\n  <li *ngFor=\\\"let transaction of result\\\">\\n    <div class=\\\"transaction-container\\\">\\n      <div class=\\\"transaction-inputs\\\">\\n        <h4>From</h4>\\n        <ul>\\n          <li>\\n            <p>\\n              <strong>Address: </strong\\n              ><a\\n                href=\\\"/explorer?term={{\\n                  encodeAddress(transaction.public_key)\\n                }}\\\"\\n                >{{ encodeAddress(transaction.public_key) }}</a\\n              >\\n            </p>\\n          </li>\\n        </ul>\\n      </div>\\n      <div class=\\\"transaction-outputs\\\">\\n        <h4>To</h4>\\n        <ul>\\n          <li *ngFor=\\\"let output of transaction.outputs\\\">\\n            <p>\\n              <strong>Address: </strong\\n              ><a href=\\\"/explorer?term={{ output.to }}\\\">{{ output.to }}</a>\\n            </p>\\n            <p><strong>Amount: </strong>{{ output.value }}</p>\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\\n<ul\\n  *ngIf=\\\"\\n    (resultType.substr(0, 5) === 'block' ||\\n      resultType.substr(0, 3) === 'txn') &&\\n    expertMode\\n  \\\"\\n>\\n  <li *ngFor=\\\"let block of result\\\">\\n    <a href=\\\"/explorer?term={{ block.index }}\\\"\\n      ><h3>Block {{ block.index }}</h3></a\\n    >\\n    <p><strong>version: </strong>{{ block.version }}</p>\\n    <p><strong>target: </strong>{{ block.target }}</p>\\n    <p><strong>nonce: </strong>{{ block.nonce }}</p>\\n    <p><strong>merkleRoot: </strong>{{ block.merkleRoot }}</p>\\n    <p><strong>index: </strong>{{ block.index }}</p>\\n    <p><strong>special min: </strong>{{ block.special_min }}</p>\\n    <p><strong>time: </strong>{{ block.time }}</p>\\n    <p>\\n      <strong>previous hash: </strong\\n      ><a href=\\\"/explorer?term={{ block.prevHash }}\\\">{{ block.prevHash }}</a>\\n    </p>\\n    <p>\\n      <strong>public_key: </strong\\n      ><a href=\\\"/explorer?term={{ block.public_key }}\\\">{{\\n        block.public_key\\n      }}</a>\\n    </p>\\n    <p>\\n      <strong>signature: </strong\\n      ><a href=\\\"/explorer?term={{ block.id }}\\\">{{ block.id }}</a>\\n    </p>\\n    <p>\\n      <strong>hash: </strong\\n      ><a href=\\\"/explorer?term={{ block.hash }}\\\">{{ block.hash }}</a>\\n    </p>\\n    <h4>Transactions</h4>\\n    <ul>\\n      <li *ngFor=\\\"let transaction of block.transactions\\\">\\n        <p>\\n          <strong>public_key: </strong\\n          ><a href=\\\"/explorer?term={{ transaction.public_key }}\\\">{{\\n            transaction.public_key\\n          }}</a>\\n        </p>\\n        <p><strong>signature: </strong>{{ transaction.id }}</p>\\n        <p><strong>hash: </strong>{{ transaction.hash }}</p>\\n        <p><strong>fee: </strong>{{ transaction.fee }}</p>\\n        <p>\\n          <strong>diffie-hellman public key: </strong\\n          >{{ transaction.dh_public_key }}\\n        </p>\\n        <p>\\n          <strong>relationship identifier: </strong\\n          ><a href=\\\"/explorer?term={{ transaction.rid }}\\\">{{\\n            transaction.rid\\n          }}</a>\\n        </p>\\n        <p>\\n          <strong>relationship data: </strong\\n          ><textarea class=\\\"form-control\\\">{{\\n            transaction.relationship\\n          }}</textarea>\\n        </p>\\n        <div *ngIf=\\\"transaction.inputs.length === 0\\\">\\n          <strong>No inputs</strong>\\n        </div>\\n        <div *ngIf=\\\"transaction.inputs.length > 0\\\">\\n          <h3>Inputs</h3>\\n          <ul>\\n            <li *ngFor=\\\"let input of transaction.inputs\\\">\\n              <strong>Signature: </strong\\n              ><a href=\\\"/explorer?term={{ input.id }}\\\">{{ input.id }}</a>\\n            </li>\\n          </ul>\\n        </div>\\n        <div *ngIf=\\\"transaction.outputs.length === 0\\\">\\n          <strong>No outputs</strong>\\n        </div>\\n        <div *ngIf=\\\"transaction.outputs.length > 0\\\">\\n          <h3>Outputs</h3>\\n          <ul *ngFor=\\\"let output of transaction.outputs\\\">\\n            <li>\\n              <strong>Address: </strong\\n              ><a href=\\\"/explorer?term={{ output.to }}\\\">{{ output.to }}</a>\\n            </li>\\n            <li><strong>Amount: </strong>{{ output.value }}</li>\\n            <hr />\\n          </ul>\\n        </div>\\n      </li>\\n    </ul>\\n  </li>\\n</ul>\\n<div\\n  *ngIf=\\\"\\n    (resultType.substr(0, 5) === 'block' ||\\n      resultType.substr(0, 3) === 'txn') &&\\n    !expertMode\\n  \\\"\\n>\\n  <div *ngFor=\\\"let block of result\\\" class=\\\"block-info\\\">\\n    <a href=\\\"/explorer?term={{ block.index }}\\\"\\n      ><h3>Block {{ block.index }}</h3></a\\n    >\\n    <div class=\\\"transactions\\\">\\n      <h3>Transactions</h3>\\n      <div *ngFor=\\\"let transaction of block.transactions\\\" class=\\\"transaction\\\">\\n        <div class=\\\"transaction-container\\\">\\n          <div class=\\\"transaction-inputs\\\">\\n            <h4>From</h4>\\n            <ul>\\n              <li>\\n                <p>\\n                  <strong>Address: </strong\\n                  ><a\\n                    href=\\\"/explorer?term={{\\n                      encodeAddress(transaction.public_key)\\n                    }}\\\"\\n                    >{{ encodeAddress(transaction.public_key) }}</a\\n                  >\\n                </p>\\n              </li>\\n            </ul>\\n          </div>\\n          <div class=\\\"transaction-outputs\\\">\\n            <h4>To</h4>\\n            <ul>\\n              <li *ngFor=\\\"let output of transaction.outputs\\\">\\n                <p>\\n                  <strong>Address: </strong\\n                  ><a href=\\\"/explorer?term={{ output.to }}\\\">{{ output.to }}</a>\\n                </p>\\n                <p><strong>Amount: </strong>{{ output.value }}</p>\\n              </li>\\n            </ul>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from \"@angular/core\";\nimport { Http } from \"@angular/http\";\nimport { Search } from \"../search\";\n\ndeclare var Bitcoin;\n\nfunction makeUrl(url) {\n  if (window.location.hostname === \"localhost\") {\n    return \"http://localhost:8005\" + url;\n  }\n  return url;\n}\n\n@Component({\n  selector: \"app-search-form\",\n  templateUrl: \"./search-form.component.html\",\n  styleUrls: [\"./search-form.component.css\"],\n})\nexport class SearchFormComponent implements OnInit {\n  model = new Search(\"\");\n  result = [];\n  resultType = \"\";\n  balance = 0;\n  searching = false;\n  submitted = false;\n  current_height = \"\";\n  circulating = \"\";\n  hashrate = \"\";\n  difficulty = \"\";\n  expertMode = false;\n\n  constructor(public http: Http) {\n    this.http.get(makeUrl(\"/api-stats\")).subscribe(\n      (res: any) => {\n        this.difficulty = this.numberWithCommas(\n          res.json()[\"stats\"][\"difficulty\"]\n        );\n        this.hashrate = this.numberWithCommas(\n          res.json()[\"stats\"][\"network_hash_rate\"]\n        );\n        this.current_height = this.numberWithCommas(\n          res.json()[\"stats\"][\"height\"]\n        );\n        this.circulating = this.numberWithCommas(\n          res.json()[\"stats\"][\"circulating\"]\n        );\n        if (!window.location.search) {\n          this.http\n            .get(\n              makeUrl(\n                \"/explorer-search?term=\" + this.current_height.replace(\",\", \"\")\n              )\n            )\n            .subscribe(\n              (res: any) => {\n                this.result = res.json().result || [];\n                this.resultType = res.json().resultType;\n                this.balance = res.json().balance;\n                this.searching = false;\n              },\n              (err: any) => {\n                alert(\"something went terribly wrong!\");\n              }\n            );\n        }\n      },\n      (err: any) => {\n        alert(\"something went terribly wrong!\");\n      }\n    );\n    if (window.location.search) {\n      this.searching = true;\n      this.submitted = true;\n      this.http\n        .get(makeUrl(\"/explorer-search\" + window.location.search))\n        .subscribe(\n          (res: any) => {\n            this.result = res.json().result || [];\n            this.resultType = res.json().resultType;\n            this.balance = res.json().balance;\n            this.searching = false;\n          },\n          (err: any) => {\n            alert(\"something went terribly wrong!\");\n          }\n        );\n    }\n  }\n\n  ngOnInit() {}\n\n  onSubmit() {\n    this.searching = true;\n    this.submitted = true;\n    this.http\n      .get(\n        makeUrl(\"/explorer-search?term=\" + encodeURIComponent(this.model.term))\n      )\n      .subscribe(\n        (res: any) => {\n          this.result = res.json().result || [];\n          this.resultType = res.json().resultType;\n          this.balance = res.json().balance;\n          this.searching = false;\n        },\n        (err: any) => {\n          alert(\"something went terribly wrong!\");\n        }\n      );\n  }\n\n  numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  // TODO: Remove this when we're done\n  get diagnostic() {\n    return JSON.stringify(this.model);\n  }\n\n  encodeAddress(publicKeyHex) {\n    const bitcoin = Bitcoin;\n    const pubkey = Bitcoin.ECPubKey(\n      Bitcoin.convert.hexToBytes(publicKeyHex),\n      true\n    );\n    return pubkey.getAddress().toString();\n  }\n}\n","export class Search {\n\tconstructor(\n\t\tpublic term: string\n\t) {}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}